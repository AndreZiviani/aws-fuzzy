//go:build ignore
// +build ignore

package main

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"text/template"
)

type RawSchema struct {
	Name string `json:"name"`
}

func ToLower(s string) string {
	return strings.ToLower(s)
}
func main() {
	const url = "https://api.github.com/repos/awslabs/aws-config-resource-schema/contents/config/properties/resource-types"

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal(err)
	}

	req.Header = http.Header{
		"Accept": {"application/vnd.github+json"},
	}

	client := http.Client{}
	res, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)

	var rawSchema []RawSchema
	err = json.Unmarshal(body, &rawSchema)
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.Create("schema.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	schema := make(map[string][]string, 0)
	r, _ := regexp.Compile(`AWS::(?P<service>\w+)::(?P<type>\w+)\.properties\.json`)
	for _, v := range rawSchema {
		tmp := r.FindStringSubmatch(v.Name)

		if schema[tmp[1]] == nil {
			schema[tmp[1]] = []string{tmp[2]}
		} else {
			schema[tmp[1]] = append(schema[tmp[1]], tmp[2])
		}
	}

	funcMap := template.FuncMap{
		"toLower": ToLower,
	}

	var Template = template.Must(template.New("").Funcs(funcMap).Parse(`// Code generated by go generate; DO NOT EDIT.
package config

var AwsServices = map[string]AwsService{
{{- range $k, $v := . }}
	{{- $lower := $k | toLower }}
	{{ printf "\"%s\": AwsService{Name: \"%s\", Types: []string{" $lower  $k }}
	{{- range $i, $t := $v }}
		{{- if $i}},{{end}}
		{{- printf "%q" $t }}
	{{- end }}
	{{- printf "}}," }}
{{- end }}
}
`))

	Template.Execute(f, schema)
}
